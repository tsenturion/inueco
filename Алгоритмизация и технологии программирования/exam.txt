блок 1
1. Определение алгоритма. Свойства алгоритма. Формы записи алгоритмов. Примеры.
2. Запись алгоритмов блок-схемами. Основные элементы блок-схем.
3. Алгоритмы с ветвлением. Пример алгоритма.
4. Алгоритм цикла с предусловием. Пример алгоритма.
5. Алгоритм цикла с постусловием. Пример алгоритма.
6. Алгоритм цикла с управляющей переменной. Пример алгоритма.
7. Основные типы данных
8. Целый и вещественный типы данных. Операции с переменными этого типа.
9. Логический тип данных. Символьный тип данных. Операции с переменными этого типа.
10. Поколения языков программирования и их характеристики.
11. Алфавит, лексика языка программирования. Пример.
12. Синтаксис и семантика программирования. Пример.
13. Составные части исходной программы.
14. Что такое система программирования? Назовите классы систем программирования.
15. Объясните суть процессов трансляции и компиляции.
16. Что такое библиотеки подпрограмм и для чего их используют?
17. Файл. Типы файлов.
18. Общие принципы разработки ПО.
19. Частотный принцип разработки ПО и принцип модульности.
20. Принцип функциональной избирательности при разработке ПО и принцип генерируемости.
21. Принцип функциональной избыточности при разработке ПО и принцип «по умолчанию».
22. Общесистемные принципы разработки ПО.
23. Как использовать операторы инкремента и декремента для изменения значений переменных целого типа?
24. Как использовать операторы сравнения и работать с символьными данными в языке программирования?
25. Какие ключевые слова и символы принадлежат лексике конкретного языка программирования?
26. Каким образом организовать код программы для улучшения его читаемости и структурированности?
27. Как выбрать подходящую систему программирования для конкретной задачи?
28. Как можно использовать стандартные и пользовательские библиотеки для оптимизации разработки программ?
29. Как обрабатывать события, связанные с работой с файлами в визуальных компонентах?
30. Какие основные типы файлов существуют, и чем они отличаются друг от друга?
31. Какие применения можно выделить для различных типов файлов в контексте программирования?
32. Какие общие принципы следует учитывать при разработке программного обеспечения?
33. Что представляет собой частотный принцип разработки ПО?
34. Как принцип модульности помогает улучшить структуру и поддерживаемость программного кода?
35. Как использовать стандартные потоки для обмена данными между программой и операционной системой?

блок 2
1. Классификация ЯП.
2. Понятие транслятора, компилятора
3. Машинные языки, эволюция программирования.
4. Структурный подход: предпосылки и особенности, история успеха
5. Принципы проектирования: снизу-вверх и сверху-вниз.
6. Этапы жизненного цикла программного обеспечения (ПО), основные модели.
7. Основные управляющие конструкции. Блок-схемы.
8. Понятие о трансляторе и трансляции.
9. Понятие о компиляции и компиляторе.
10. Машинный язык, объектные файлы, линковка.
11. Исполняемые файлы. Формат выполняемых файлов.
12. Тип данных и их форматы.
13. Приведение примитивных типов. Типы значений и ссылочные типы.
14. Лексемы и пробельные символы.
15. Объявления и типы данных.
16. Понятие о переменной.
17. Синтаксис объявления и инициализации.
18. Составное присвоение.
19. Области видимости.
20. Время жизни переменных.
21. Работа с консольными приложениями. Создание нового проекта.
22. Добавление к проекту файлов с исходным кодом.
23. Компиляция, компоновка и выполнение проекта.
24. Конфигурация проекта.
25. Операторы ввода-вывода.
26. Поток. Манипуляторы и форматирование ввода-вывода.
27. Выражения.
28. Виды выражений.
29. Порядок (приоритеты) вычислений.
30. Типы операций.
31. Условный оператор.
32. Полная и неполная формы условного оператора.
33. Тернарная операция.
34. Оператор выбора.
35. Циклические операции.
36. Особенности использования циклов разных конструкций.
37. Организация массивов в программе.
38. Синтаксис описания массивов.
39. Операции над массивами.
40. Указатели и массивы.
41. Адресная арифметика.
42. Строки и литералы.
43. Указатели и строки.
44. Основные операции над строками.
45. Процедуры и функции.
46. Передача параметров при организации процедур/функций.
47. Рекурсия.
48. Глобальные и локальные переменные. Области видимости переменных.
49. Структуры. Алгоритмы работы.
50. Объединения. Алгоритмы работы.
51. Перечисление. Алгоритмы работы.
52. Открытие и закрытие файла.
53. Чтение и запись текстовых файлов.
54. Файлы произвольного доступа.
55. Работа с файлами при использовании визуальных компонент.
56. Стандартные потоки в операционных системах.
57. Ввод со стандартного потока ввода.
58. Ввод средствами языка python.
59. Описание опций формата функций input и print.
60. Как создать новый консольный проект?
61. Как добавить новый файл с исходным кодом к существующему проекту?
62. Как выполнить процесс компиляции и запустить консольное приложение?
63. Как использовать различные конфигурации проекта для разработки и отладки?
64. Как изменить конфигурацию проекта (например, целевую платформу или версию языка)?
65. Как работать с потоками ввода-вывода в языке программирования?
66. Какие виды выражений можно использовать в языке программирования?
67. Какие правила приоритета операторов следует учитывать при написании сложных выражений?
68. Какие возможности предоставляет условный оператор в языке программирования?
69. В каких случаях применение тернарной операции предпочтительно?
70. Как использовать различные типы массивов (одномерные, двумерные) в программе?
71. Как использовать указатели и адресную арифметику для работы с массивами?
72. Как объявлять и инициализировать строки в языке программирования?
73. Как использовать литералы строк для упрощения работы с текстовой информацией?
74. Как использовать указатели для манипуляции строками?
75. В чем преимущества использования указателей при работе с символьными строками?
76. Какие методы передачи параметров поддерживаются в языке программирования?
77. В каких случаях целесообразно использовать передачу параметров по значению или по ссылке?
78. Как определить и использовать рекурсивные функции?
79. Как избегать бесконечной рекурсии и оптимизировать рекурсивные алгоритмы?
80. Как объявить и использовать структуры в языке программирования?
81. Какие алгоритмы обработки данных в структурах являются наиболее эффективными?
82. Как открывать и закрывать файлы в языке программирования?
83. Как обработать ошибки, возникающие при открытии и закрытии файлов?
84. Как работать с файлами произвольного доступа?
85. Как использовать указатели для навигации по данным в файле?

блок 3
1. Эволюция парадигм программирования.
2. Предпосылки появления ООП.
3. Определение объекта и класса, различия.
4. Понятие класса, объекта.
5. Структура описания класса.
6. Создание и инициализация экземпляра класса (объекта).
7. Поля и методы.
8. Конструкторы и деструкторы классов.
9. Объявление объектов (создание экземпляров) класса.
10. Принцип инкапсуляции.
11. Обеспечение безопасности данных.
12. Классификация и использование модификаторов доступа.
13. Акцессоры для доступа к закрытым полям.
14. Принцип наследования.
15. Основные достоинства и преимущества использования. Синтаксис объявления наследования.
16. Виды наследования в ООП.
17. Виды и примеры наследования классов в python.
18. Запечатанные классы.
19. Абстрактные классы.
20. Иерархия наследования.
21. Определение наследования.
22. Базовые и производные классы.
23. Конструкторы производных классов.
24. Базовые функции класса.
25. Иерархия классов. Наследование и графика.
26. Общее и частное наследование.
27. Уровни наследования.
28. Множественное наследование.
29. Неопределенность в множественном наследование.
30. Включение: классы в классах.
31. Роль наследования при разработке программ.
32. Обобщение и специализация.
33. Принцип полиморфизма. Основные достоинства и преимущества использования. Синтаксис
34. Скрытие и переопределение. Виртуальные методы. Виды полиморфизма в python.
35. Интерфейсы. Примеры решения практических задач с использованием технологии объектно-ориентированного программирования.
36. Понятие COM-объекта
37. Шаблоны функций.
38. Шаблоны классов.
39. Исключения. Обработка ошибок пользователей.
40. Контейнеры. Алгоритмы.
41. Итераторы. Специальные итераторы.
42. Последовательные и ассоциативные контейнеры.
43. Хранение пользовательских объектов. Функциональные объекты.
44. Как объявляется наследование в синтаксисе языка программирования?
45. В чем отличия между одними видами наследования и другими?
46. Какие преимущества и ограничения существуют при использовании запечатанных классов?
47. Как создать и использовать абстрактные классы в языке программирования?
48. Как выбрать подходящую структуру иерархии для конкретной задачи?
49. Как организовать иерархию наследования классов?
50. Как определить наследование и отличить базовый класс от производного?
51. Какие аспекты следует учитывать при определении иерархии наследования?
52. В чем заключается общее и частное наследование в ООП?
53. Какие сценарии предпочтительны для каждого из видов наследования?
54. Как реализуется множественное наследование в объектно-ориентированных языках программирования?
55. Какие преимущества и ограничения существуют при использовании множественного наследования?
56. В чем заключается включение (композиция) классов в объектно-ориентированном программировании?
57. Как осуществляется реализация полиморфизма в языке программирования?
58. Как создать и использовать виртуальные методы в python?
59. Какие виды полиморфизма реализуются в языке python?
60. Что представляет собой COM-объект и как организовано взаимодействие с ним?
61. Как создавать и использовать шаблоны классов?
